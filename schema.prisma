datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(uuid())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  email                 String   @unique
  name                  String
  picture               String
  contentful_token_read String?
  logins                Login[]
}

model Login {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  auth0Id   String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Team {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  slug      String   @unique
}

model TeamUser {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  role      String
}

model ContentModel {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  cms           String
  slug          String   @unique
  title         String
  description   String
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  team          Team?    @relation(fields: [teamId], references: [id])
  teamId        String?
  ogMetaImage   CloudinaryAsset? @relation(fields: [ogMetaImageId], references: [id])
  ogMetaImageId String?
  versions      ContentModelVersion[]
}

model ContentModelVersion {
  id                   String           @id @default(uuid())
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  contentModel         ContentModel     @relation(fields: [contentModelId], references: [id])
  contentModelId       String
  name                 String
  version              Int
  model                Json
  position             Json
  author               User             @relation(fields: [authorId], references: [id])
  authorId             String
  image                CloudinaryAsset? @relation("Image", fields: [imageId], references: [id])
  imageId              String?
  imageNoConnections   CloudinaryAsset? @relation("ImageNoConnections", fields: [imageNoConnectionsId], references: [id])
  imageNoConnectionsId String?
}

model Tag {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  title         String
  slug          String         @unique
  contentModels ContentModel[]
}

model ContentModelTag {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  contentModel   ContentModel @relation(fields: [contentModelId], references: [id])
  contentModelId String
  tag            Tag          @relation(fields: [tagId], references: [id])
  tagId          String
}

model CloudinaryAsset {
  id                                    String               @id @default(uuid())
  createdAt                             DateTime             @default(now())
  updatedAt                             DateTime             @updatedAt
  public_id                             String               @unique
  version                               Int
  signature                             String
  width                                 Int?
  height                                Int?
  resource_type                         String
  type                                  String
  // Not actually used, here for Prisma's sake
  imageContentModelVersion              ContentModelVersion? @relation("Image")
  imageNoConnectionsContentModelVersion ContentModelVersion? @relation("ImageNoConnections")
}

generator client {
  provider = "prisma-client-js"
}
