datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(uuid())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  email                 String   @unique
  name                  String
  picture               String
  contentful_token_read String?
  logins                Login[]
}

model Login {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  auth0Id   String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Team {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  slug      String   @unique
}

model TeamUser {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  role      String
}

model ContentModel {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cms         String
  slug        String
  title       String
  description String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  team        Team?    @relation(fields: [teamId], references: [id])
  teamId      String?
  versions    ContentModelVersion[]
}

model ContentModelVersion {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  contentModel   ContentModel @relation(fields: [contentModelId], references: [id])
  contentModelId String
  name           String
  version        Int
  model          Json
  position       Json
  author         User         @relation(fields: [authorId], references: [id])
  authorId       String
}

model Tag {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  title         String
  slug          String         @unique
  contentModels ContentModel[]
}

model ContentModelTag {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  contentModel   ContentModel @relation(fields: [contentModelId], references: [id])
  contentModelId String
  tag            Tag          @relation(fields: [tagId], references: [id])
  tagId          String
}

generator client {
  provider = "prisma-client-js"
}
